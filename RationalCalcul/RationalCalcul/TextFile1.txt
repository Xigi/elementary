using System;
internal class Program
{
  internal static void Main()
  {
    try
    {
      Console.WriteLine(Rational.Parse("d/s"));
    }
    catch(Exception ex)
    {
      Console.WriteLine(ex.Message);
    }
  }
}

public class Rational
{
  public Rational(int numerator, int denominator)
  {
    if (denominator < 1)
    {
      throw new ArgumentException("Denominator cannot be zero or negative");
    }

    Numerator = numerator;
    Denominator = denominator;
    
  }

  public static bool TryParse(string s, out Rational result)
  {
    result = new Rational(0,1);
    try 
    {
      result = Parse(s);
      return true;
    }
    catch
    {
      return false;
    }
  }

  public static Rational Parse(string s)
  {
    string[] values = s.Split("/");
    if (values.Length != 2)
    {
      throw new ArgumentException($"Cannot parse to Rational - {s}");
    }

    if (!int.TryParse(values[0], out int numerator) 
      || !int.TryParse(values[1], out int denominator))
    {
      throw new ArgumentException($"Cannot parse to Rational - {s}");
    }
    
    return new Rational(numerator, denominator);
  }

  public override string ToString()
  {
    return $"{Numerator}/{Denominator}";
  }

  public int Numerator { get; }
  public int Denominator { get; }
}




_______________________________________


using System;
internal class Program
{
  internal static void Main()
  {
    try
    {
      var person = new Person("Peter", "Garms", 29);
      BuyAlcohol(person, 23);
      Console.WriteLine($"{person.FirstName} is drunk");
    }
    catch(AlcoholAgeException ex)
    {
      Console.WriteLine($"Age exception anntention!!!!! {ex.Message}");
    }
    catch(Exception ex)
    {
      Console.WriteLine($"Standard event: {ex.Message}");
    }
  }

  internal static void BuyAlcohol(Person p, int hour)
  {
    if (p.Age < 18)
    {
      throw new AlcoholAgeException(
        $"{p.FirstName} {p.LastName} can't buy alcohol because hi's(her) age is {p.Age}");
    }

    if (hour < 11 || hour > 22)
    {
      throw new Exception("Ca not buy an alcohol");
    }

    //...
  }
}

public class AlcoholAgeException : Exception
{
  public AlcoholAgeException(string s)
   : base(s)
  {
  }
}

public class Person
{
  public Person(string firstName, string lastName, int age)
  {
    FirstName = firstName;
    LastName = lastName;
    Age = age;
  }

  public string FirstName { get; }
  public string LastName { get; }

  public int Age { get; }
}